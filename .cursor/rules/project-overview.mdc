---
alwaysApply: true
---

# MCBuddy Server - Project Overview üõ†Ô∏è

## Project Information
- **Full Name**: MCBuddy Server
- **Short Name**: mcbuddy-server
- **Description**: –ë—ç–∫–µ–Ω–¥ –¥–ª—è AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ MCBuddy ‚Äî –±—ã—Å—Ç—Ä—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ Bun —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π OpenRouter –∏ web search, –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ Minecraft –∏ Telegram üåü

## Technical Specifications
- **TypeScript Version**: 5.0+
- **Runtime**: Bun 1.0+
- **Main File**: src/index.ts
- **Architecture**: Modular TypeScript application with feature-based structure and REST API

## Technology Stack
- **Language**: TypeScript
- **Runtime**: Bun.js
- **Database**: MongoDB (Mongoose ODM)
- **Cache**: Redis (ioredis)
- **Queue**: BullMQ (job queue system)
- **HTTP**: Bun built-in server
- **Proxy**: Caddy (reverse proxy and SSL)
- **Logging**: tslog (structured logging)
- **Functional Programming**: fp-ts
- **Containerization**: Docker, docker-compose

## Core Features
- **REST API** ‚Äî endpoints –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram –±–æ—Ç–∞ –∏ Minecraft –ø–ª–∞–≥–∏–Ω–∞
- **AI Integration** ‚Äî –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenRouter –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º AI –º–æ–¥–µ–ª—è–º
- **Web Search** ‚Äî –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- **Usage Tracking** ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –∏ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- **Rate Limiting** ‚Äî –∑–∞—â–∏—Ç–∞ –æ—Ç –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–π –∏ —Å–ø–∞–º–∞
- **Queue System** ‚Äî —Ñ–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ BullMQ

## AI Integrations
- **OpenRouter** ‚Äî Aggregator of various AI models (GPT, Claude, etc.)
- **Custom Token Support** ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ X-OpenRouter-Token

## Core Modules
- **application**: Application initialization and server setup
- **features/ask**: Question processing with AI integration
- **features/askx**: Command execution through AI
- **features/health**: Health check endpoints
- **entities**: Data models (User, Usage)
- **infrastructure**: External integrations (Database, Providers, Queues)
- **shared**: Common utilities and middleware

## Key Entry Points
- **Main File**: [src/index.ts](mdc:src/index.ts)
- **Entry Point**: [src/application/entrypoint.ts](mdc:src/application/entrypoint.ts)
- **Ask Controller**: [src/features/ask/ask.controller.ts](mdc:src/features/ask/ask.controller.ts)
- **AskX Controller**: [src/features/askx/askx.controller.ts](mdc:src/features/askx/askx.controller.ts)
- **OpenRouter Client**: [src/infrastructure/providers/openrouter/openrouter.client.ts](mdc:src/infrastructure/providers/openrouter/openrouter.client.ts)

## Architectural Principles
- **Pattern**: Feature-based modular architecture with layered design
- **Structure**: Organized by features, entities, and infrastructure
- **Type Safety**: Strong TypeScript typing throughout
- **Functional Programming**: fp-ts for error handling and composition
- **Logging**: Structured logging with tslog
- **Error Handling**: Centralized error handling with retry logic
- **Caching**: Redis for chat history and response caching
- **Queue System**: BullMQ for asynchronous job processing
